name: Build Test and Package

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: write   # needed to push updated coverage baseline

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test:
    name: Build and Test (${{ matrix.goos }}-${{ matrix.goarch }})
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: ubuntu-latest
            goos: linux
            goarch: amd64
            coverage: true
          - runner: ubuntu-latest
            goos: linux
            goarch: arm64
          - runner: ubuntu-latest
            goos: linux
            goarch: arm
          - runner: macos-latest
            goos: darwin
            goarch: amd64
          - runner: windows-latest
            goos: windows
            goarch: amd64

    env:
      GO_VERSION: 1.25.x
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      CGO_ENABLED: 0

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
          cache: false

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('src/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Pre-coverage baseline snapshot
        if: matrix.coverage == true
        id: baseline_before
        shell: bash
        run: |
          if [ -f .coverage_baseline ]; then
            echo "content=$(cat .coverage_baseline)" >> "$GITHUB_OUTPUT"
          else
            echo "content=__none__" >> "$GITHUB_OUTPUT"
          fi

      - name: Run tests + coverage gating (only once)
        if: matrix.coverage == true
        shell: bash
        run: |
          chmod +x .github/scripts/run_copilot_checks.sh
          bash .github/scripts/run_copilot_checks.sh
          echo "Current coverage:"; cat .coverage_current

      - name: Commit updated coverage baseline (if improved)
        if: matrix.coverage == true && success()
        shell: bash
        run: |
          if [ ! -f .coverage_baseline ]; then
            echo "No baseline file produced; skipping commit"; exit 0
          fi
          BEFORE="${{ steps.baseline_before.outputs.content }}"
          AFTER="$(cat .coverage_baseline)"
          if [ "$BEFORE" != "$AFTER" ]; then
            echo "Baseline changed ($BEFORE -> $AFTER). Committing.";
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add .coverage_baseline .coverage_current || true
            git commit -m "chore: update coverage baseline [skip ci]" || true
            git push || echo "Push skipped (maybe PR from fork)"
          else
            echo "Baseline unchanged; no commit.";
          fi

      - name: Build binary
        shell: bash
        run: |
          mkdir -p artifacts
          cd src
          OUT="hydra-${GOOS}-${GOARCH}"
          if [ "${GOOS}" = "windows" ]; then OUT="$OUT.exe"; fi
          echo "Building $OUT"
            GOOS=${GOOS} GOARCH=${GOARCH} go build -trimpath -ldflags "-s -w" -o "../artifacts/$OUT" .
          cd ..

      - name: Package artifact (zip, non-Windows)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          cd artifacts
          BIN="hydra-${GOOS}-${GOARCH}"
          [ "${GOOS}" = "windows" ] && BIN="$BIN.exe"
          ZIP="$BIN.zip"
          zip -q "$ZIP" "$BIN"
          ls -l

      - name: Package artifact (zip, Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          Set-Location artifacts
          $bin = "hydra-${env:GOOS}-${env:GOARCH}.exe"
          $zip = "$bin.zip"
          Compress-Archive -Path $bin -DestinationPath $zip -Force
          Get-ChildItem -Name

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: hydra-${{ matrix.goos }}-${{ matrix.goarch }}
          path: artifacts/hydra-${{ matrix.goos }}-${{ matrix.goarch }}*
          if-no-files-found: error

      - name: Upload coverage artifacts
        if: matrix.coverage == true
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: |
            coverage.out
            .coverage_current
            .coverage_baseline
          if-no-files-found: warn

      - name: Fail if coverage job failed earlier
        if: matrix.coverage == true && failure()
        run: exit 1
