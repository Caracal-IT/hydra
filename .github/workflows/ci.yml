name: CI

on:
  push:
  pull_request:

jobs:
  build:
    name: Build and Test (${{ matrix.name }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            name: linux-amd64
            GOOS: linux
            GOARCH: amd64
            GOARM: ''
          - os: ubuntu-latest
            name: linux-arm64
            GOOS: linux
            GOARCH: arm64
            GOARM: ''
          - os: ubuntu-latest
            name: linux-arm
            GOOS: linux
            GOARCH: arm
            GOARM: '7'
          - os: macos-latest
            name: darwin-amd64
            GOOS: darwin
            GOARCH: amd64
            GOARM: ''
          - os: windows-latest
            name: windows-amd64
            GOOS: windows
            GOARCH: amd64
            GOARM: ''

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.25'

      - name: Ensure go.sum exists
        run: |
          go work sync || true
          go mod tidy || true
          if [ -d ./src/gohydra ]; then (cd ./src/gohydra && go mod tidy) || true; fi

      - name: Get Go env and set GOMODCACHE for cache
        id: goenv
        run: |
          echo "GOMODCACHE=$(go env GOMODCACHE)" >> $GITHUB_ENV

      - name: Cache Go build and modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ${{ env.GOMODCACHE }}
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.mod') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run Copilot checks (tests, coverage, baseline)
        run: ./.github/scripts/run_copilot_checks.sh

      - name: Build binaries
        env:
          GOOS: ${{ matrix.GOOS }}
          GOARCH: ${{ matrix.GOARCH }}
          GOARM: ${{ matrix.GOARM }}
        run: |
          mkdir -p artifacts
          outname=hydra_${{ matrix.name }}
          if [ "${{ matrix.GOOS }}" = "windows" ]; then outname="${outname}.exe"; fi
          echo "Building for ${GOOS}/${GOARCH} ${GOARM} -> artifacts/${outname}"
          # Build the main binary in ./src to avoid building non-main packages across modules
          GOOS=${{ matrix.GOOS }} GOARCH=${{ matrix.GOARCH }} GOARM=${{ matrix.GOARM }} go build -o artifacts/${outname} ./src

      - name: Upload binaries
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.name }}
          path: artifacts/

      - name: Upload coverage file
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: .coverage_current
